AWSTemplateFormatVersion: 2010-09-09
Description: My Lambda function

Parameters:
  CapitalizedProjectName:
    Type: String
    Default: codepipeline-us-east-1-33387209843
#    Default: MyLambdaProject
  DeploymentPackageKey:
    Type: String
    Description: An S3 object key pointing of a ZIP file, an archive of everything that is needed to run the Lambda function. It is the output of the Build stage of the pipeline.

Resources:
  LambdaRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref CapitalizedProjectName
#          'Fn::ImportValue': !Sub '${CapitalizedProjectName}PipelineArtifactsBucket'
#          'Fn::ImportValue': !Ref CapitalizedProjectName
#          'Fn::ImportValue': 'codepipeline-us-east-1-33387209843'
        S3Key: !Ref DeploymentPackageKey
      FunctionName: my-lambda-function
      Handler: jingguan.main
      Role: !GetAtt LambdaRunnerRole.Arn
      Runtime: python3.6
      Timeout: 300
      Environment:
        Variables:
          AWS_ENV: 1


  CloudWatchEventRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - events.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/CloudWatchEventsInvocationAccess
        - arn:aws:iam::aws:policy/service-role/CloudWatchEventsBuiltInTargetExecutionAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
#        - arn:aws:iam::aws:policy/AmazonS3FullAccess
#        - arn:aws:iam::aws:policy/CloudWatchFullAccess
#        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  MyEventsRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Events Rule with Lambda function
#      EventPattern:
#        source:
#          - aws.ec2
#      RoleArn: !GetAtt
#        - CloudWatchEventRunnerRole
#        - Arn
      ScheduleExpression: cron(0 2 ? * * *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - LambdaFunction
            - Arn
          Id: AutoCheckin
#          RoleArn: !GetAtt
#            - CloudWatchEventRunnerRole
#            - Arn
#          KinesisParameters:
#            PartitionKeyPath:

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "MyEventsRule"
          - "Arn"

Outputs:
  LambdaFunction:
    Description: The ARN of the created Lambda function
    Value: !GetAtt LambdaFunction.Arn
